AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for creating an ECS Task Definition, ECS Cluster, and Task Role with Bedrock access'

Parameters:
  ImageName:
    Type: String
    Description: The name of the container image to use for the ECS task
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The ID of the VPC to use for the ECS service
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: The ID of the subnet to use for the ECS service

Resources:

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: MyECSCluster
      CapacityProviders: 
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  ECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                  - 'bedrock:InvokeModelWithResponseStream'
                  - 'bedrock:ListFoundationModels'
                Resource: '*'

  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: 
        Fn::Join:
          - '-'
          - - 'task'
            - !Ref AWS::StackName
            - Fn::Select:
              - 0
              - Fn::Split:
                - ':'
                - !Ref ImageName
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '2048'
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name:
            Fn::Select:
              - 0
              - Fn::Split:
                - ':'
                - !Ref ImageName
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageName}'
          Cpu: 0
          PortMappings:
            - Name: streamlit-80-tcp
              ContainerPort: 80
              Protocol: tcp
              AppProtocol: http
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
              mode: non-blocking
              max-buffer-size: 25m

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 
        Fn::Join:
          - ''
          - - '/ecs/'
            - Fn::Select:
              - 0
              - Fn::Split:
                - ':'
                - !Ref ImageName
      RetentionInDays: 14


  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'

  TaskDefinitionArn:
    Description: The ARN of the Task Definition
    Value: !Ref ECSTaskDefinition
    Export:
      Name: !Sub '${AWS::StackName}-TaskDefinitionArn'

  TaskRoleArn:
    Description: The ARN of the ECS Task Role
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TaskRoleArn'

  ECSSecurityGroup:
    Description: ECS Security Group
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ECSSecurityGroup'